services:
  kdemo-customer-api:
    image: kdemo-customer-api
    build:
      context: .
      dockerfile: api/Customer.Api/Dockerfile
    restart: on-failure
    env_file: .env
    networks:
      - main-network
    depends_on:
      kdemo-postgres:
        condition: service_healthy
      kdemo-rabbitmq:
        condition: service_healthy
  kdemo-catalog-api:
    image: kdemo-catalog-api
    build:
      context: .
      dockerfile: api/Catalog.Api/Dockerfile
    restart: on-failure
    env_file: .env
    networks:
      - main-network
    depends_on:
      kdemo-postgres:
        condition: service_healthy
      kdemo-rabbitmq:
        condition: service_healthy
  kdemo-orders-api:
    image: kdemo-orders-api
    build:
      context: .
      dockerfile: api/Orders.Api/Dockerfile
    restart: on-failure
    env_file: .env
    networks:
      - main-network
    depends_on:
      kdemo-postgres:
        condition: service_healthy
      kdemo-rabbitmq:
        condition: service_healthy
  kdemo-orders-service:
    image: kdemo-orders-service
    build:
      context: .
      dockerfile: services/Service.Orders/Dockerfile
    restart: on-failure
    env_file: .env
    networks:
      - main-network
    depends_on:
      - kdemo-orders-api
      - kdemo-catalog-api
      - kdemo-customer-api
  kdemo-nginx:
    image: nginx:alpine
    hostname: 'kdemo-nginx'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy.conf:/etc/nginx/proxy.conf:ro
      - ./nginx/logs/:/var/log/nginx/
    ports:
      - '10100:80'
      - '10101:8080'
    depends_on:
      - kdemo-orders-api
      - kdemo-catalog-api
      - kdemo-customer-api
      - kdemo-orders-service
    restart: always
    networks:
      - main-network
  kdemo-web:
    image: kdemo-web
    build:
      context: web
      dockerfile: prod.dockerfile
    env_file: .env
    restart: on-failure
    depends_on:
      - kdemo-nginx
    networks:
      - main-network

  kdemo-postgres:
    image: kdemo-postgres
    build:
      context: ./database
      dockerfile: Dockerfile
    env_file: .env
    networks:
      - main-network
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U admin'" ]
      interval: 10s
      timeout: 3s
      retries: 3
      
  kdemo-rabbitmq:
    image: rabbitmq:3-management
    env_file: .env
    networks:
      - main-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

networks:
  main-network:
    driver: bridge